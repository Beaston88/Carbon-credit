generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             String  @id @default(uuid())
  uid            String  @unique
  role           role
  govt_id        String? @unique
  gst            String? @unique
  address        String?
  phone          String?
  owner_name     String?
  wallet_address String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionsSent     transactions[] @relation("SentTransactions")
  transactionsReceived transactions[] @relation("ReceivedTransactions")
  listings             marketplace[]  @relation("SellerListings")
}

enum role {
  BUYER
  SELLER
  GOVT
}

model transactions {
  id            String   @id @default(uuid())
  status        String // ACTIVE, SUCCESS, FAILED
  sender_id     String
  receiver_id   String
  validator     String
  credits       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  marketplaceId String?

  sender      user         @relation("SentTransactions", fields: [sender_id], references: [id])
  receiver    user         @relation("ReceivedTransactions", fields: [receiver_id], references: [id])
  marketplace marketplace? @relation(fields: [marketplaceId], references: [id])
}

model marketplace {
  id          String  @id @default(uuid())
  seller_id   String
  credits     Float // Total credits in the listing (unchanged)
  available   Float // Remaining available credits
  price       Float
  name        String
  description String
  image       String
  verified    Boolean @default(false)
  status      String  @default("ACTIVE") // ACTIVE, INACTIVE (sold out)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seller       user           @relation("SellerListings", fields: [seller_id], references: [id])
  transactions transactions[]
}
